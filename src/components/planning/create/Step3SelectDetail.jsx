/**
 * Ê≠•È™§3ÔºöÈÄâÊã©ÁªÜÂàÜÁ±ªÂûã
 * Ê†πÊçÆÁõÆÊ†áÁ±ªÂûãÔºàÁïôÂ≠¶/Â∑•‰Ωú/ÁßªÊ∞ëÔºâÊòæÁ§∫‰∏çÂêåÁöÑÁªÜÂàÜÈÄâÈ°π
 */

import { Ionicons } from '@expo/vector-icons';
import React, { useMemo, useState } from 'react';
import {
    ScrollView,
    StyleSheet,
    Text,
    TouchableOpacity,
    View,
} from 'react-native';

import { COLORS } from '@/src/constants';

// ÁïôÂ≠¶ÁªÜÂàÜÈÄâÈ°π
const STUDY_OPTIONS = [
  {
    id: 'high_school',
    icon: 'üéí',
    title: 'È´ò‰∏≠/‰∏≠Â≠¶',
    subtitle: 'High School',
    duration: 'ÈÄöÂ∏∏ 2-4 Âπ¥',
    description: 'ÈÄÇÂêàÂàù‰∏≠ÊØï‰∏öÊàñÈ´ò‰∏≠Âú®ËØªÂ≠¶Áîü',
  },
  {
    id: 'bachelor',
    icon: 'üéì',
    title: 'Êú¨Áßë',
    subtitle: 'Bachelor',
    duration: 'ÈÄöÂ∏∏ 3-4 Âπ¥',
    description: 'Ëé∑ÂèñÂ≠¶Â£´Â≠¶‰ΩçÔºåÂÖ®Èù¢Â≠¶‰π†‰∏ì‰∏öÁü•ËØÜ',
  },
  {
    id: 'master',
    icon: 'üìö',
    title: 'Á°ïÂ£´',
    subtitle: 'Master',
    duration: 'ÈÄöÂ∏∏ 1-2 Âπ¥',
    description: 'Ê∑±ÈÄ†‰∏ì‰∏öÊäÄËÉΩÔºåÊèêÂçáÂ≠¶ÊúØÊ∞¥Âπ≥',
  },
  {
    id: 'phd',
    icon: 'üî¨',
    title: 'ÂçöÂ£´',
    subtitle: 'PhD',
    duration: 'ÈÄöÂ∏∏ 3-5 Âπ¥',
    description: '‰ªé‰∫ãÁßëÂ≠¶Á†îÁ©∂ÔºåÂüπÂÖªÁã¨Á´ãÁ†îÁ©∂ËÉΩÂäõ',
  },
  {
    id: 'language',
    icon: 'üí¨',
    title: 'ËØ≠Ë®ÄÂ≠¶Ê†°',
    subtitle: 'Language School',
    duration: 'ÈÄöÂ∏∏ 3-12 ‰∏™Êúà',
    description: '‰∏ìÊ≥®ËØ≠Ë®ÄÂ≠¶‰π†ÔºåÊèêÂçáÂ§ñËØ≠ËÉΩÂäõ',
  },
  {
    id: 'exchange',
    icon: 'üîÑ',
    title: '‰∫§Êç¢Áîü/ËÆøÈóÆÂ≠¶ËÄÖ',
    subtitle: 'Exchange Program',
    duration: 'ÈÄöÂ∏∏ 6-12 ‰∏™Êúà',
    description: 'Áü≠ÊúüÂ≠¶‰π†‰∫§ÊµÅÔºåÊãìÂ±ïÂõΩÈôÖËßÜÈáé',
  },
];

// Â∑•‰ΩúÁªÜÂàÜÈÄâÈ°π
const WORK_OPTIONS = [
  {
    id: 'skilled_worker',
    icon: 'üíº',
    title: 'ÊäÄÊúØÂ∑•‰Ωú',
    subtitle: 'Skilled Worker',
    duration: 'ÈïøÊúüÁ≠æËØÅ',
    description: '‰∏ì‰∏öÊäÄËÉΩÁ±ªÂ∑•‰ΩúÔºåÂ¶ÇIT„ÄÅÂ∑•Á®ãÁ≠â',
  },
  {
    id: 'intern',
    icon: 'üëî',
    title: 'ÂÆû‰π†/ÂüπËÆ≠',
    subtitle: 'Internship',
    duration: '3-12 ‰∏™Êúà',
    description: 'Ëé∑ÂèñÂ∑•‰ΩúÁªèÈ™åÔºåÁßØÁ¥ØÂÆûË∑µËÉΩÂäõ',
  },
  {
    id: 'working_holiday',
    icon: '‚úàÔ∏è',
    title: 'ÊâìÂ∑•Â∫¶ÂÅá',
    subtitle: 'Working Holiday',
    duration: 'ÈÄöÂ∏∏ 1-2 Âπ¥',
    description: 'ËæπÊóÖË°åËæπÂ∑•‰ΩúÔºå‰ΩìÈ™åÂΩìÂú∞ÁîüÊ¥ª',
  },
  {
    id: 'entrepreneur',
    icon: 'üöÄ',
    title: 'Âàõ‰∏ö/ÊäïËµÑ',
    subtitle: 'Entrepreneur',
    duration: 'ÈïøÊúüÁ≠æËØÅ',
    description: 'Âú®Êµ∑Â§ñÂàõÂäû‰ºÅ‰∏öÊàñÊäïËµÑÈ°πÁõÆ',
  },
];

// ÁßªÊ∞ëÁªÜÂàÜÈÄâÈ°π
const IMMIGRATION_OPTIONS = [
  {
    id: 'skilled_migration',
    icon: 'üéØ',
    title: 'ÊäÄÊúØÁßªÊ∞ë',
    subtitle: 'Skilled Migration',
    duration: 'Ê∞∏‰πÖÂ±ÖÁïô',
    description: 'Âá≠ÂÄü‰∏ì‰∏öÊäÄËÉΩÂíåÂ∑•‰ΩúÁªèÈ™åÁî≥ËØ∑',
  },
  {
    id: 'investment',
    icon: 'üí∞',
    title: 'ÊäïËµÑÁßªÊ∞ë',
    subtitle: 'Investment Migration',
    duration: 'Ê∞∏‰πÖÂ±ÖÁïô',
    description: 'ÈÄöËøáÊäïËµÑÊàñÁªèÂïÜËé∑ÂæóÁßªÊ∞ëËµÑÊ†º',
  },
  {
    id: 'family',
    icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
    title: '‰∫≤Â±ûÁßªÊ∞ë',
    subtitle: 'Family Sponsored',
    duration: 'Ê∞∏‰πÖÂ±ÖÁïô',
    description: 'ÈÄöËøáÂÆ∂Â∫≠ÊàêÂëòÊãÖ‰øùÁî≥ËØ∑ÁßªÊ∞ë',
  },
  {
    id: 'refugee',
    icon: 'üÜò',
    title: '‰∫∫ÈÅì‰∏ª‰πâ/ÈöæÊ∞ë',
    subtitle: 'Humanitarian',
    duration: 'Ê∞∏‰πÖÂ±ÖÁïô',
    description: 'Âü∫‰∫é‰∫∫ÈÅì‰∏ª‰πâÂéüÂõ†ÁöÑÁßªÊ∞ëÁî≥ËØ∑',
  },
];

export default function Step3SelectDetail({ data, onNext, onBack }) {
  const [selectedDetail, setSelectedDetail] = useState(data?.detailType || null);
  
  const goalType = data?.goalType;
  const countryName = data?.country?.name || 'ÁõÆÊ†áÂõΩÂÆ∂';

  // Ê†πÊçÆÁõÆÊ†áÁ±ªÂûãËé∑ÂèñÈÄâÈ°π
  const options = useMemo(() => {
    switch (goalType) {
      case 'study':
        return STUDY_OPTIONS;
      case 'work':
        return WORK_OPTIONS;
      case 'immigration':
        return IMMIGRATION_OPTIONS;
      default:
        return [];
    }
  }, [goalType]);

  // Ëé∑ÂèñÊ†áÈ¢ò
  const getTitle = () => {
    switch (goalType) {
      case 'study':
        return 'ÈÄâÊã©Â≠¶ÂéÜÂ±ÇÊ¨°';
      case 'work':
        return 'ÈÄâÊã©Â∑•‰ΩúÁ±ªÂûã';
      case 'immigration':
        return 'ÈÄâÊã©ÁßªÊ∞ëÁ±ªÂà´';
      default:
        return 'ÈÄâÊã©ËØ¶ÁªÜÁ±ªÂûã';
    }
  };

  // ÈÄâÊã©ÈÄâÈ°π
  const handleSelectDetail = (optionId) => {
    setSelectedDetail(optionId);
  };

  // Á°ÆËÆ§Âπ∂ËøõÂÖ•‰∏ã‰∏ÄÊ≠•
  const handleNext = () => {
    if (!selectedDetail) {
      return;
    }
    onNext({ detailType: selectedDetail });
  };

  // Ê∏≤ÊüìÈÄâÈ°πÂç°Áâá
  const renderOptionCard = (option) => {
    const isSelected = selectedDetail === option.id;
    
    return (
      <TouchableOpacity
        key={option.id}
        style={[styles.optionCard, isSelected && styles.optionCardSelected]}
        onPress={() => handleSelectDetail(option.id)}
        activeOpacity={0.7}
      >
        {/* ÂõæÊ†á */}
        <View style={styles.iconContainer}>
          <Text style={styles.icon}>{option.icon}</Text>
        </View>

        {/* ÂÜÖÂÆπ */}
        <View style={styles.optionContent}>
          <Text style={[styles.optionTitle, isSelected && styles.optionTitleSelected]}>
            {option.title}
          </Text>
          <Text style={styles.optionSubtitle}>{option.subtitle}</Text>
          <Text style={styles.optionDuration}>{option.duration}</Text>
          <Text style={styles.optionDescription}>{option.description}</Text>
        </View>

        {/* ÈÄâ‰∏≠Ê†áËÆ∞ */}
        <View style={styles.radioContainer}>
          <View
            style={[
              styles.radioOuter,
              isSelected && styles.radioOuterSelected,
            ]}
          >
            {isSelected && <View style={styles.radioInner} />}
          </View>
        </View>
      </TouchableOpacity>
    );
  };

  return (
    <View style={styles.container}>
      {/* È°∂ÈÉ®Êìç‰ΩúÊ†è */}
      <View style={styles.header}>
        <TouchableOpacity onPress={onBack} style={styles.backButton}>
          <Ionicons name="arrow-back" size={24} color={COLORS.gray[900]} />
        </TouchableOpacity>
        
        <Text style={styles.stepText}>Ê≠•È™§ 3/5</Text>
      </View>

      <ScrollView 
        style={styles.content}
        showsVerticalScrollIndicator={false}
      >
        {/* Ê†áÈ¢ò */}
        <View style={styles.titleContainer}>
          <Text style={styles.emoji}>
            {goalType === 'study' ? 'üìö' : goalType === 'work' ? 'üíº' : 'üè†'}
          </Text>
          <Text style={styles.title}>{getTitle()}</Text>
          <Text style={styles.subtitle}>
            ÂâçÂæÄ {countryName} {goalType === 'study' ? 'ÁïôÂ≠¶' : goalType === 'work' ? 'Â∑•‰Ωú' : 'ÁßªÊ∞ë'}
          </Text>
        </View>

        {/* ÈÄâÈ°πÂàóË°® */}
        <View style={styles.optionsContainer}>
          {options.map(option => renderOptionCard(option))}
        </View>
      </ScrollView>

      {/* Â∫ïÈÉ®ÊåâÈíÆ */}
      <View style={styles.footer}>
        <TouchableOpacity 
          style={styles.backFooterButton}
          onPress={onBack}
        >
          <Ionicons name="chevron-back" size={20} color={COLORS.gray[600]} />
          <Text style={styles.backButtonText}>ËøîÂõû</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.nextButton, !selectedDetail && styles.nextButtonDisabled]}
          onPress={handleNext}
          disabled={!selectedDetail}
        >
          <Text style={[styles.nextButtonText, !selectedDetail && styles.nextButtonTextDisabled]}>
            ‰∏ã‰∏ÄÊ≠•
          </Text>
          <Ionicons 
            name="chevron-forward" 
            size={20} 
            color={selectedDetail ? '#FFFFFF' : COLORS.gray[400]}
          />
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.gray[200],
  },
  backButton: {
    padding: 4,
  },
  stepText: {
    fontSize: 14,
    fontWeight: '600',
    color: COLORS.gray[600],
  },
  content: {
    flex: 1,
  },
  titleContainer: {
    paddingHorizontal: 20,
    paddingTop: 24,
    paddingBottom: 24,
  },
  emoji: {
    fontSize: 48,
    marginBottom: 12,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    color: COLORS.gray[900],
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: COLORS.gray[600],
  },
  optionsContainer: {
    paddingHorizontal: 20,
    paddingBottom: 32,
  },
  optionCard: {
    flexDirection: 'row',
    padding: 16,
    marginBottom: 12,
    backgroundColor: COLORS.gray[50],
    borderRadius: 12,
    borderWidth: 2,
    borderColor: 'transparent',
  },
  optionCardSelected: {
    backgroundColor: `${COLORS.primary[600]}08`,
    borderColor: COLORS.primary[600],
  },
  iconContainer: {
    width: 48,
    height: 48,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  icon: {
    fontSize: 32,
  },
  optionContent: {
    flex: 1,
  },
  optionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: COLORS.gray[900],
    marginBottom: 2,
  },
  optionTitleSelected: {
    color: COLORS.primary[600],
  },
  optionSubtitle: {
    fontSize: 13,
    color: COLORS.gray[500],
    marginBottom: 4,
  },
  optionDuration: {
    fontSize: 12,
    color: COLORS.primary[600],
    fontWeight: '600',
    marginBottom: 6,
  },
  optionDescription: {
    fontSize: 14,
    color: COLORS.gray[600],
    lineHeight: 20,
  },
  radioContainer: {
    justifyContent: 'center',
    marginLeft: 8,
  },
  radioOuter: {
    width: 24,
    height: 24,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: COLORS.gray[300],
    alignItems: 'center',
    justifyContent: 'center',
  },
  radioOuterSelected: {
    borderColor: COLORS.primary[600],
    backgroundColor: COLORS.primary[600],
  },
  radioInner: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#FFFFFF',
  },
  footer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderTopWidth: 1,
    borderTopColor: COLORS.gray[200],
    backgroundColor: '#FFFFFF',
  },
  backFooterButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
  },
  backButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.gray[600],
    marginLeft: 4,
  },
  nextButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: COLORS.primary[600],
    paddingVertical: 14,
    paddingHorizontal: 28,
    borderRadius: 12,
  },
  nextButtonDisabled: {
    backgroundColor: COLORS.gray[100],
  },
  nextButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginRight: 4,
  },
  nextButtonTextDisabled: {
    color: COLORS.gray[400],
  },
});

